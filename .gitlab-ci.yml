stages:
- build
- dockerify
- test
- release
- deploy

before_script:
- export RELEASE_IMAGE="registry.dbogatov.org/dbogatov/shevastream:$CI_BUILD_REF_NAME"
- export TEST_IMAGE="$RELEASE_IMAGE-build"
- export DOTNET_TAG="$CI_BUILD_REF_NAME-build"

build:
  image: dbogatov/docker-containers:dotnet-core-latest
  stage: build
  script:
  - export ASPNETCORE_ENVIRONMENT="Production"
  - printf "{\"Version\":{\"GitHash\":\"%s\"}}" $CI_BUILD_REF > src/version.json
  - ./build.sh
  artifacts:
    expire_in: 30 min
    paths:
    - src/bin/
  tags:
  - Docker

dockerify:
  stage: dockerify
  dependencies:
  - build
  before_script:
  script:
  - docker build -t $TEST_IMAGE .
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.dbogatov.org
  - docker push $TEST_IMAGE
  tags:
  - Shell

test-dotnet:
  stage: test
  image: registry.gitlab.com/rweda/docker:dotnet-core-latest
  script:
  - printf "{\"Version\":{\"GitHash\":\"%s\"}}" $CI_BUILD_REF > src/version.json
  - cd test
  - dotnet restore
  - ./test-dotnet.sh | tee tests.out
  - "cat tests.out | grep 'Failed: 0.'"
  tags:
  - Docker

# test-integration:
#   stage: test
#   script:
#   - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#   - docker-compose pull
#   - docker-compose build
#   - docker-compose up &
#   - sleep 60
#   - test/./test-integration.sh
#   - kill %1
#   tags:
#   - shell

release:  
  stage: release
  script:
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.dbogatov.org
  - docker pull $TEST_IMAGE
  - docker tag $TEST_IMAGE $RELEASE_IMAGE
  - docker push $RELEASE_IMAGE
  tags:
  - Shell
